pnorm(-0.591) - pnorm(-0.728)
pnorm(-1.301)
pnorm(-1.438)
pnorm(-1.301) - pnorm(-1.438)
6 + 9
x <- 15
x - 1
x + 4 <- 15
x <- 5
5 * x <- x
5 * x -> x
x -> 15
15 -> 15
15 -> x
x <- 15
x <- c(1, -1, 3.5, 2)
x
x + 2
x ^2
x - mean(x)
before <- c(78, 72, 78, 79, 105)
after <- c(67, 65, 79, 70, 93)
after - before
mean(after - before)
1 : 10
seq(from = 2, to = 6, by = 0.4)
rep(5, 3)
rep(2:5, each = 3)
rep(1:3, length.out = 10)
2^(1:10)
1:10 * c(-1, 1)
1:7*1:2
seq(from = 1, end = 12)
seq(from = 1, to = 12, by = 0.5)
(seq(from = 1, to = 10))^3
x <- seq(from = 1, to = 100)
x
1/x
1/x * c(1,-1)
cumsum(1:30)
cumsum(1:20)
seq(from = 1, to = 10, times = 1)
?SEQ
?seq
seq(from = 1, to = 10, times = 2)
seq(from = 1, to = 49)
x <- seq(from = 1, to = 49)
x - (0, 2)
x - c(0,2)
rep(c(1,0),3)
x <- c(5,9,2,14,-4)
x
x[3]
x[c(2,3,4)]
x[3:length(x)]
x > 4
x[x > 4]
LETTERS
letters[1:12]
LETTERS[1:12]
LETTERS[c(from = 1, to = 25, by = 2)]
c(from = 1, to = 25, by = 2)
LETTERS[seq(from = 1, to = 25, by = 2)]
LETTERS[seq(from = 1, to = 26, by = 2)]
x <- c(5,9,2,14,-4)
(x > 0) & (x < 1-)
(x > 0) & (x < 10)
x <- rnorm(n = 20)
x
x[x < 1]
x[(x>-0.5)&(x<1)]
x[(x>1.5)&(x<-1.5)]
x <- c("Hello", "My", "Name","Is","Zrd")
x
x[-1]
c(x[1:3], "Rachel")
matrix(1:12, nrow = 3, ncol = 4)
matrix(1:12,nrow = 3)
matrix(1:3, nrow = 3, ncol = 4)
matrix(1:12, nrow = 3, byrow = TRUE)
diag(3)
diag(1)
diag(2)
diag(4)
diag(1:3)
1:5 %o% 1:5
1:5 %o% 1:6
out(1:3, 1:4, "+")
outer(1:3, 1:4, "+")
outer(1:3, 1:4, "*")
A <- matrix(c(1:8, 10), 3, 3)
A
x <- c(1,2,3)
x
A %*% x
x %*% A
A * x
t(A)
det(A)
diag(A)
B <- matrix(1:4, nrow = 2)
A %*% B
solve(a)
solve(A)
y <- c(1,2,3,4,2,6,-3,-1,-3)
B <- matrix(y, byrow = TRUE, nrow = 3)
B
B %*% B %*% B
B/diag(3)
diag3
diag(3)
A
A[2,1]
A[2,2:ncol(A)]
A
A[,1:2]
A[c(), 1:2]
A[2,2:ncol(A), drop = FALSE]
A
cbind(A, t(A))
rbind(A,1)
cbind(A, t(A),A)
matrix(1:8, ncol = 4)
rep(1,10)
c(rep(1,10),rep(-1,10))
rep(c(rep(1,10),rep(-1,10)), 10)
x <- rep(c(rep(1,15),rep(-1,15)), 10)
matrix(x,nrow = 15)
c(rep(1,3),rep(0,15))
c(rep(c(rep(1,3),rep(0,15)),4),1,1,1)
matrix(c(rep(c(rep(1,3),rep(0,15)),4),1,1,1),nrow = 5)
matrix(c(rep(c(rep(1,3),rep(0,15)),4),1,1,1),nrow = 5,byrow = TRUE)
outer(1:5,0:4)
outer(1:5,1:5)
outer(1:5,1:5,FUN = "+")
outer(1:5,0:4,FUN = "+")
outer(1:10,0:9,FUN = "+")
outer(1:9,0:8,FUN = "+")
3%%2
(outer(1:9,0:8,FUN = "+"))%%10
A <- diag(5)
B <- matrix(rep(0,30),nrow = 6)
B
rbind(A,B)
C <-rbind(A,B)
C
D <- -1 * matrix(rep(0,36),nrow = 6)
D
D <- -1 * diag(6)
D
E <- matrix(rep(30,1),nrow = 5)
F <- rbind(E, D)
E
E <- matrix(rep(1,30),nrow = 5)
E
rbind(E, D)
cbind(C, rbind(E,D))
diag(0)
x <- list(1:3, TRUE, "Hello", list(1:2, 5))
x
x[3]
x[[3]]
x[3:4]
x[c(3,4)]
x[[3]]
x[[2,3]]
x[2:3]
x <- list(y = 1.3, TRUE, z = "Hello")
x
x$y
x$``
names(x)
library(MASS)
head(hilss)
head(hills)
?hilss
?hills
class(hilss)
class(hills)
is(hills, "data.frame")
is(x, "data.frame")
hills
hills[3,]
hills[hills$dist >=12, ]
hills$time
hills[1,]
hills[3]
hills %*% c(1,2,4)
mean(hills)
mean(hills$dist)
plot(hills$climb[hills$dist < 10], hills$time[hills$dist < 10])
with(hills, plot(climb[dist<10], time[dist < 10]))
with(hills, mean(rac))
hills
mean(hills$climb/hills$time)
with(hills, climb[dist>5]/time[dist > 5])
with(hills, mean(climb[dist>5]/time[dist > 5]))
books <- data.frame(author = c("Rachel", "Jessica", "Cox"),)
#Create a data frame
books <- data.frame(author = c("Rachel", "Jessica", "Cox"),
#Create a data frame
books <- data.frame(author = c("Rachel", "Jessica", "Cox"),
year = c(2000, 1999, 1998),
publisher = c("Wiley", "Chapman", "Sage")
#Create a data frame
books <- data.frame(author = c("Rachel", "Jessica", "Cox"),
year = c(2000, 1999, 1998),
publisher = c("Wiley", "Chapman", "Sage"))
#Create a data frame
books <- data.frame(author = c("Rachel", "Jessica", "Cox"),year = c(2000, 1999, 1998),publisher = c("Wiley", "Chapman", "Sage"))
#Create a data frame
books <- data.frame(author = c("Rachel", "Jessica", "Cox"),
year = c(2000, 1999, 1998),
publisher = c("Wiley", "Chapman", "Sage"))
books
View(books)
clear(books)
books <- data.frame(author = c("Rachel", "Jessica", "Cox"),
year = c(2000, 1999, 1998),
publisher = c("Wiley", "Chapman", "Sage"))
books
#Exercise 3.3
#(a)
films <- data.frame(title = c("film1", "film2", "film3"),
director = c("d1", "d2", "d3"),
year = c(2018, 2019, 2020),
country = c("China", "Korea", "Japan"))
fildms
films
films
films2 <- data.frame(title = c("film1", "film2", "film3", "film4"),
director = c("d1", "d2", "d3", "d4"),
year = c(2018, 2019, 2020, 2021),
country = c("China", "Korea", "Japan", "USA"))
rbind(films, films2)
sort(rbind(films, films2))
combine <- rbind(films, films2)
sort(combine$title)
set.seed(1442)
height = round(rnorm(100, mean = rep(c(170,160), each=50),sd=10))
sex = rep(c("M", "F"), each = 50)
head(sex)
Sex = as.factor(sex)
head(Sex)
plot(Sex, height)
as.integer(Sex)
attributes(Sex)
as.character(Sex)
as.factor((Sex))
sample(c(1,2,3), replace = True, size = 50)
sample(c(1,2,3), replace = TRUE, size = 50)
f <- sample(c(1,2,3), replace = TRUE, size = 50)
f <- as.factor(f)
f
levels(f)
levels(f) <- c("Yes", "No", "Maybe")
f
droplevels(f, "Maybe")
f[f!="Maybe"]
birthwt
birthwt$race
Race = factor(birthwt$race)
Race
summary(Race)
summary(birthwt$race)
plot(Race)
plot(birthwt$race)
names(hills)
row.names(hills)
hills
attributes(hills)
attributes(hills) <- c(attributes(hills), list(type = "race"))
attributes(hills)
hills$type
names(hills)
type(names)
type(hills)
row.names(hills)
names(hills)
class(hills)
type(hills)
read.table(file.choose(),header = TrUE)
?read.table()
setdiff
setdiff(3,2)
args(setdiff)
a <- c(1,4,5,7)
b <- c(1,2,5,9)
setdiff(a,b)
setdiff(b,a)
setdiff(y = b, x = 1)
setdiff(y = b, x = 1)
setdiff(y = b, x = a)
setdiff(y = b, a)
setdiff(y = a, b)
x <- rnorm(10)
y <- x + rnorm(10)
lm(y~x)
lm(for = y~x)
lm(form = y~x)
square = function(x) {}
#Writing functions
square = function(x){
x^2
}
square(4)
mean2 <- function(x) {
n <- length(x)
sum(x)/n
}
mean2(1:10)
logit_function <- function(x) {
en <- x/(1-x)
log(en)
}
logit_function(2)
logit_function(100)
logit_function(-100)
logit_function(0.5)
i <- 0:5; sum(i^2)
i
i <- 1:n
#最后一行是return的？
taylor <- function(x,n) {
i <- 1:n
sum((-1)^(i+1) * x^i / i)
}
taylor(0.99,1000)
log(1.99)
install.packages("sqldf")
library(ggplot2)
detach("package:base", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
plot(cars)
x <- c(1,2,3,4)
y <- c(3,4,5,6)
ls() # used to look at a list of all of the objects
rm(x, y) # used to delete any that we don't want
ls()
x <- c(1,2,3,4)
y <- c(3,4,5,6)
ls() # used to look at a list of all of the objects
rm(x, y) # used to delete any that we don't want
ls()
pdf('Figure.pdf') # Crate a pdf
plot(x, y, col = 'green')
x <- c(1,2,3,4)
y <- c(3,4,5,6)
ls()
rm(x, y)
ls()
rm(list=ls()) # remove everything at once
x = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
x
matrix(c(1,2,3,4), 2, 2, byrow = TRUE)
# set.seed(0)
# So that you can reproduce the result
x = rnorm(50,mean = 0, sd = 1)
y = x + rnorm(50, mean = 50, sd = 0.1)
cor(x, y) # Get the correlation between x and y
var(x)
sd(x)
x = rnorm(100)
y = rnorm(100)
plot(x, y, xlab = 'x-axis', ylab = 'y-axis', main = 'Plot of X vs Y')
pdf('Figure.pdf') # Crate a pdf
plot(x, y, col = 'green')
dev.off() # Tell R that we are done creating the plot
y = x
f = outer(x, y, function(x, y)cos(y)/(1 + x^2))
contour(x, y, f)
x = seq(1, 10) # or x = 1:10
y = x
f = outer(x, y, function(x, y)cos(y)/(1 + x^2))
contour(x, y, f)
image(x, y, fa)
image(x, y, f)
persp(x, y, f)
persp(x, y, f, theta = 30, phi = 20)
# Control the angles at which the plot is viewed
A = matrix(1:16, 4, 4)
A
A = matrix(1:16, 4, 4)
A
A[2,3]
A = matrix(1:16, 4, 4)
A
A[2,3]
A[c(1, 3), c(2, 4)] # Select multiple row and column
A[1:3, 2:4]
A[, 1:2]
A[1:2, ]
A[-2, ] # '-' means except
dim(A) # The dimension of A, 就是python里的shape?
Auto = read.table('Auto.data')
?fix
library(MASS)
library(MASS)
library(ISLR)
fix(Boston)
library(MASS)
library(ISLR)
names(Boston)
library(MASS)
library(ISLR)
names(Boston)
attach(Boston)
lm.fit = lm(medv~lstat) # lm: linear regression model
# lm(y~x, data)
library(MASS)
library(ISLR)
names(Boston)
attach(Boston)
lm.fit = lm(medv~lstat) # lm: linear regression model
# lm(y~x, data)
lm.fit
lm.fit
summary(lm.fit)
names(lm.fit) # what kind of info are stored?
coef(lm.fit) # get the coefficient; or lm.fit$coefficients
par(mfrow = c(2, 2))
plot(lm.fit)
par(mfrow = c(2, 2))
plot(lm.fit)
par(mfrow = c(2, 2))
plot(lm.fit)
par(mfrow = c(2, 2))
plot(lm.fit)
lm.fit
summary(lm.fit)
names(lm.fit) # what kind of info are stored?
coef(lm.fit) # get the coefficient; or lm.fit$coefficients
# par(mfrow = c(2, 2))
plot(lm.fit)
par(mfrow = c(2, 2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
par(mfrow = c(1, 2))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
par(mfrow = c(2, 1))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
par(mfrow = c(2, 2))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit)) # == python idxmax()
plot(hatvalues(lm.fit))
print(which.max(hatvalues(lm.fit))) # == python idxmax()
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit)) # == python idxmax()
attach(Boston)
lm.fit = lm(medv~lstat + age) # 如果是multiple的话格式是lm(y~x1+x2+x3)
fix(Boston)
fix(Boston)
x <- c(1,2,3,4)
y <- c(3,4,5,6)
ls()
rm(x, y)
ls()
rm(list=ls()) # remove everything at once
x = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
x
matrix(c(1,2,3,4), 2, 2, byrow = TRUE)
# set.seed(0)
# So that you can reproduce the result
x = rnorm(50,mean = 0, sd = 1)
y = x + rnorm(50, mean = 50, sd = 0.1)
cor(x, y) # Get the correlation between x and y
var(x)
sd(x)
x = rnorm(100)
y = rnorm(100)
plot(x, y, xlab = 'x-axis', ylab = 'y-axis', main = 'Plot of X vs Y')
pdf('Figure.pdf') # save it as pdf
# jpeg('Figure.jpeg') # save it as jpeg
plot(x, y, col = 'green')
dev.off() # Tell R that we are done creating the plot
x = seq(1, 10) # or x = 1:10
y = x
f = outer(x, y, function(x, y)cos(y)/(1 + x^2))
contour(x, y, f)
image(x, y, f)
persp(x, y, f, theta = 30, phi = 20)
# Theta and phi control the angles at which the plot is viewed
A = matrix(1:16, 4, 4)
A
A[2,3]
A[c(1, 3), c(2, 4)] # Select multiple row and column
A[1:3, 2:4]
A[, 1:2]
A[1:2, ]
A[-2, ] # '-' means except
dim(A) # The dimension of A, 就是python里的shape?
# Auto = read.table('Auto.data', header = T, na.strings = '?')
# dim(Auto) # return the dimension
# Auto = na.omit(Auto) # remove rows with NA
# names(Auto) # Check the variable names
# plot(Auto$, Auto$)
# # 或者不使用$
# attach(Auto)
# plot(column1, column2) # scatter plot if two numerical
# hist(column1, col = 2) # histogram
# pairs(Auto) # scatter plot matrix
# cylinders = as.factor(cylinders)
summary(Auto)
savehistory() # save a record of all of the commands in the most recent session
