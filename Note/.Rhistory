Carseats
lm.fit = lm(Sales~.+Income:Advertising+Price:Age, data = Carseats)
summay(lm.fit)
lm.fit = lm(Sales~.+Income:Advertising+Price:Age, data = Carseats)
summary(lm.fit)
contrasts(Carseats$ShelveLoc)
getwd()
5%%2 # Python: %
2^3 # Python: **
x <- c(1,2,3,4)
y <- c(3,4,5,6)
ls()
rm(x, y)
ls()
rm(list=ls()) # remove everything at once
x <- list(1:3, TRUE, 'Hello', list(1:2, 5))
x = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
x
matrix(c(1,2,3,4), 2, 2, byrow = TRUE)
books <- data.frame(author = c("Ripley", 'Cox', 'Snijders', 'Cox'),
year = c(1980, 1979, 1999, 2006),
publihser = c('Wiley', "Chapman", "Sage", "CUP"))
books
setdiff
args(setdiff) # Get the arguments for function
square = function(x) {
x^2
}
square(4)
mean2 <- function(x) {
n <- length(x)
sum(x)/n
}
mean2(1:10)
factorial2 = function(n) {
out = 1
for (i in 1:n) {
out = out * i
}
out
}
factorial2(10)
for (name in 1:4)
print(name)
abs2 = function(x) {
if (x < 0) out = -x
else out = x
out
}
abs2(-4)
abs3 = function(x) {
ifelse(x < 0, -x, x)
}
abs3(2)
abs3(-3)
isPrime = function(n){
i = 2
if (n < 2) return(FALSE)
while (i < sqrt(n)) {
if (n%%i == 0) return(FALSE)
i = i + 1
}
return(TRUE) # 注意return后面一定要加上括号
}
isPrime(10)
isPrime(37)
fib = function(n) {
if (n<2) return(1)
else return(fib(n-1) + fib(n-2))
}
fib(10) # 斐波那契数列
# set.seed(0)
# So that you can reproduce the result
x = rnorm(50,mean = 0, sd = 1)
y = x + rnorm(50, mean = 50, sd = 0.1)
cor(x, y) # Get the correlation between x and y
var(x)
sd(x)
x = rnorm(100)
y = rnorm(100)
plot(x, y, xlab = 'x-axis', ylab = 'y-axis', main = 'Plot of X vs Y')
pdf('Figure.pdf') # save it as pdf
# jpeg('Figure.jpeg') # save it as jpeg
plot(x, y, col = 'green')
dev.off() # Tell R that we are done creating the plot
x = seq(1, 10) # or x = 1:10
y = x
f = outer(x, y, function(x, y)cos(y)/(1 + x^2))
contour(x, y, f)
image(x, y, f)
persp(x, y, f, theta = 30, phi = 20)
# Theta and phi control the angles at which the plot is viewed
A = matrix(1:16, 4, 4)
A
A[2,3]
A[c(1, 3), c(2, 4)] # Select multiple row and column
A[1:3, 2:4]
A[, 1:2]
A[1:2, ]
A[-2, ] # '-' means except
dim(A) # The dimension of A, 就是python里的shape?
# Auto = read.table('Auto.data', header = T, na.strings = '?')
# dim(Auto) # return the dimension
# Auto = na.omit(Auto) # remove rows with NA
# names(Auto) # Check the variable names
# plot(Auto$, Auto$)
# # 或者不使用$
# attach(Auto)
# plot(column1, column2) # scatter plot if two numerical
# hist(column1, col = 2) # histogram
# pairs(Auto) # scatter plot matrix
# cylinders = as.factor(cylinders)
# summary(Auto)
savehistory() # save a record of all of the commands in the most recent session
library(MASS)
library(ISLR)
names(Boston)
lm.fit = lm(medv~lstat, data = Boston) # lm: least square linear regression model
# lm(y~x, data)
lm.fit
summary(lm.fit)
names(lm.fit) # what kind of info are stored?
coef(lm.fit) # get the coefficient; or lm.fit$coefficients
par(mfrow = c(2, 2)) # split the screen into 4 parts
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit)) # == python idxmax()
lm.fit = lm(medv~lstat + age, data = Boston) # 如果是multiple的话格式是lm(y~x1+x2+x3)
summary(lm.fit)
lm.fit = lm(medv~., data = Boston) # use this short-hand!
summary(lm.fit)
lm.fit1 = lm(medv~.-age, data = Boston) # 懂了！就是.-age就好了
summary(lm.fit1)
lm.fit1 = update(lm.fit, ~.-age) #！！
summary(lm(medv~lstat*age, data = Boston))
# lstat*age is the short-hand for: lstat + age + lstat: age
lm.fit2 = lm(medv~lstat + I(lstat^2), data = Boston)
summary(lm.fit2)
lm.fit = lm(medv~lstat, data = Boston)
anova(lm.fit, lm.fit2)
par(mfrow = c(2, 2))
plot(lm.fit2)
# There is little discernible pattern in the residuals
lm.fit5 = lm(medv~poly(lstat, 5), data = Boston)
summary(lm.fit5)
summary(lm(medv~log(rm), data = Boston))
names(Carseats) # examine the Carseats data
# Try to predict Sales
lm.fit = lm(Sales~.+Income:Advertising+Price:Age, data = Carseats)
# 如果有Categorical data, R 自动 dummy variable
summary(lm.fit)
contrasts(Carseats$ShelveLoc)
# ShelveLocGood & ShelveLocMeidum
# 注意，自动drop_first = True
LoadLibraries = funcion() {
LoadLibraries = function() {
library(ISIR)
library(MASS)
print("The libraries have been loaded.")
}
library(ISLR)
names(Smarket)
cor(Smarket)
cor(Smarket, [,-9])
cor(Smarket[,-9])
cor(Smarket[,-9]) # R不像Python一样会自动过滤掉categorical，所以要手动减掉
attach(Smarket)
plot(Volume)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data = Smarket, family = binomial)
# family = binoial, tell R to run a logistic regression
summary(glm.fits)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data = Smarket, family = binomial)
# family = binoial, tell R to run a logistic regression
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
glm.probs = predict(glm.fits, type = "response")
glm.probs = predict(glm.fit, type = "response")
# type = "response", the output is P(Y = 1|X)
glm.probs[1:10] # if no X data is passed, automatically use X_train
contrasts(Direction)
glm.pred = rep("Down", 1250)
glm.pred[glm.probs > 0.5] = "Up"
table(glm.pred, Direction)
table(glm.pred, Direction)
mean(glm.pred == Direction) # Get classification correct rate
train = (Year < 2005)
Smarket.2005 = Smarket[!train, ]
dim(Smarket.2005)
glm.fits = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data = Smarket, family = binomial,
subset = train) #只用2005之前的data train model
glm.probs = predict(glm.fits, Smarket.2005, type = "response")
Direction.2005 = Direction[!train,]
Direction
Direction.2005 = Direction[!train]
glm.pred = rep("Down", 252)
glm.pred[glm.probs>0.5] = "Up"
table(glm.ored, Direction.2005)
Direction.2005 = Direction[!train]
glm.pred = rep("Down", 252)
glm.pred[glm.probs>0.5] = "Up"
table(glm.pred, Direction.2005)
Direction.2005 = Direction[!train]
glm.pred = rep("Down", 252)
glm.pred[glm.probs>0.5] = "Up"
table(glm.pred, Direction.2005)
mean(glm.pred == Direction.2005)
glm.fit2 = glm(Direction~Lag1+Lag2, data = Smarket, family = binomial, subset = Train)
glm.fit2 = glm(Direction~Lag1+Lag2, data = Smarket, family = binomial, subset = train)
glm.fit2 = glm(Direction~Lag1+Lag2, data = Smarket, family = binomial, subset = train)
glm.prob = predict(glm, Smarket.2005, type = "response")
glm.fit2 = glm(Direction~Lag1+Lag2, data = Smarket, family = binomial, subset = train)
glm.prob = predict(glm.fit2, Smarket.2005, type = "response")
glm.pred = rep("Down", 252)
glm.pred[glm.prob > 0.5] = "Up"
table(glm.pred, Direction.2005)
glm.fit2 = glm(Direction~Lag1+Lag2, data = Smarket, family = binomial, subset = train)
glm.prob = predict(glm.fit2, Smarket.2005, type = "response")
glm.pred = rep("Down", 252)
glm.pred[glm.prob > 0.5] = "Up"
table(glm.pred, Direction.2005)
mean(glm.pred == Direction.2005)
predict(glm.fits2, newdata = data.frame(Lag1 = c(1.2, 1.5), Lag2 = c(1.1, -0.8)),
type = "response")
predict(glm.fit2, newdata = data.frame(Lag1 = c(1.2, 1.5), Lag2 = c(1.1, -0.8)),
type = "response")
A = cbind(1:10, (1:10)^2, (1:10)^3)
A = cbind(1:10, (1:10)^2, (1:10)^3)
A
library(MASS)
apply(hills, 2, mean)
library(MASS)
apply(hills, 2, mean)
apply(hills, 2, sd)
mu = c(-2, -1, 0, 1, 2)
out = lapply(mu, function(x) rnorm(100, mean = x))
out
mu = c(-2, -1, 0, 1, 2)
out = lapply(mu, function(x) rnorm(100, mean = x))
lapply(out, mean)
sapply(out, mean)
out = replicate(20, rnorm(100), simplify = FALSE)
library(MASS)
head(genotype)
with(genotype, tapply(Wt, Mother, mean))
# group according to the value of Mother
tapply(genotype$Wt, genotype[,1:2], mean)
mapply(seq, from = c(1,4,-3), to = c(2,9,0), by = 0.5)
occupationalStatus
arr = array(1:18, dim = c(2,3,3))
# di就是dimension，所以这边是define了一个2*3*3的array
arr
arr = array(1:24, dim = c(2,3,4))
# di就是dimension，所以这边是define了一个2*3*3的array
arr
dim(arr)
arr[1,2,3]
# 1 行 2 列 第三个东西
arr[,2,3]
arr[,2,]
library(MASS)
head(cabbages)
view(cabbages)
View(cabbages)
table(cabbages$Date)
table(cabbages[,1:2])
# Discretization: group data together into intervals
head(Nile)
# Discretization: group data together into intervals
head(Nile)
bins = c(0, seq(from = 700, to=1300, by=100), Inf) # Inf 就是infinite
bins
# Discretization: group data together into intervals
head(Nile)
bins = c(0, seq(from = 700, to=1300, by=100), Inf) # Inf 就是infinite
bins
disNile = cut(Nile, bins)
head(disNile)
table(disNile)
bins
# you can adjust the lable
disNile = cut(Nile, bins, labels = bins[-9])
table(disNile)
"hello"
cat("hello")
cat("hello")
getwd()
5%%2 # Python: %
2^3 # Python: **
x <- c(1,2,3,4)
y <- c(3,4,5,6)
ls()
rm(x, y)
ls()
rm(list=ls()) # remove everything at once
x <- list(1:3, TRUE, 'Hello', list(1:2, 5))
x = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
x
matrix(c(1,2,3,4), 2, 2, byrow = TRUE)
books <- data.frame(author = c("Ripley", 'Cox', 'Snijders', 'Cox'),
year = c(1980, 1979, 1999, 2006),
publihser = c('Wiley', "Chapman", "Sage", "CUP"))
books
setdiff
args(setdiff) # Get the arguments for function
square = function(x) {
x^2
}
square(4)
mean2 <- function(x) {
n <- length(x)
sum(x)/n
}
mean2(1:10)
factorial2 = function(n) {
out = 1
for (i in 1:n) {
out = out * i
}
out
}
factorial2(10)
for (name in 1:4)
print(name)
abs2 = function(x) {
if (x < 0) out = -x
else out = x
out
}
abs2(-4)
abs3 = function(x) {
ifelse(x < 0, -x, x)
}
abs3(2)
abs3(-3)
isPrime = function(n){
i = 2
if (n < 2) return(FALSE)
while (i < sqrt(n)) {
if (n%%i == 0) return(FALSE)
i = i + 1
}
return(TRUE) # 注意return后面一定要加上括号
}
isPrime(10)
isPrime(37)
fib = function(n) {
if (n<2) return(1)
else return(fib(n-1) + fib(n-2))
}
fib(10) # 斐波那契数列
A = cbind(1:10, (1:10)^2, (1:10)^3)
apply(A, 2, sums) # calculate the sum of all columns
?sum
getwd()
5%%2 # Python: %
2^3 # Python: **
x <- c(1,2,3,4)
y <- c(3,4,5,6)
ls()
rm(x, y)
ls()
rm(list=ls()) # remove everything at once
x <- list(1:3, TRUE, 'Hello', list(1:2, 5))
x = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
x
matrix(c(1,2,3,4), 2, 2, byrow = TRUE)
books <- data.frame(author = c("Ripley", 'Cox', 'Snijders', 'Cox'),
year = c(1980, 1979, 1999, 2006),
publihser = c('Wiley', "Chapman", "Sage", "CUP"))
books
setdiff
args(setdiff) # Get the arguments for function
square = function(x) {
x^2
}
square(4)
mean2 <- function(x) {
n <- length(x)
sum(x)/n
}
mean2(1:10)
factorial2 = function(n) {
out = 1
for (i in 1:n) {
out = out * i
}
out
}
factorial2(10)
for (name in 1:4)
print(name)
abs2 = function(x) {
if (x < 0) out = -x
else out = x
out
}
abs2(-4)
abs3 = function(x) {
ifelse(x < 0, -x, x)
}
abs3(2)
abs3(-3)
isPrime = function(n){
i = 2
if (n < 2) return(FALSE)
while (i < sqrt(n)) {
if (n%%i == 0) return(FALSE)
i = i + 1
}
return(TRUE) # 注意return后面一定要加上括号
}
isPrime(10)
isPrime(37)
fib = function(n) {
if (n<2) return(1)
else return(fib(n-1) + fib(n-2))
}
fib(10) # 斐波那契数列
A = cbind(1:10, (1:10)^2, (1:10)^3)
apply(A, 2, sum) # calculate the sum of all columns
library(MASS)
apply(hills, 2, mean)
apply(hills, 2, sd)
# set.seed(0)
# So that you can reproduce the result
x = rnorm(50,mean = 0, sd = 1)
y = x + rnorm(50, mean = 50, sd = 0.1)
cor(x, y) # Get the correlation between x and y
var(x)
sd(x)
mu = c(-2, -1, 0, 1, 2)
out = lapply(mu, function(x) rnorm(100, mean = x))
lapply(out, mean)
sapply(out, mean) #除了这个sapply和lapply都是一样的
out = replicate(20, rnorm(100), simplify = FALSE)
# out is a list of 20 independent data sets, each consisting of 100 standard normal random variables
library(MASS)
head(genotype)
with(genotype, tapply(Wt, Mother, mean))
# group according to the value of Mother
# with(genotype, tapply(Wt, Mother, summary))
tapply(genotype$Wt, genotype[,1:2], mean)
mapply(seq, from = c(1,4,-3), to = c(2,9,0), by = 0.5)
# 1, 2
# 4, 9
# -3, 0
occupationalStatus
# 如果用dataframe表示的话就是3498行，所以可以用这种 "contingency table"（难道不是pivot table吗？）
arr = array(1:24, dim = c(2,3,4))
# di就是dimension，所以这边是define了一个2*3*4的array
# 所以就是2行3列，然后有4个这样的东西？
arr
dim(arr)
arr[1,2,3]
# 1 行 2 列 第三个东西
arr[,2,]
library(MASS)
head(cabbages)
table(cabbages$Date)
# 懂了就是table相当于value_counts() in Python
table(cabbages[,1:2])
# Discretization: group data together into intervals
head(Nile)
bins = c(0, seq(from = 700, to=1300, by=100), Inf) # Inf 就是infinite
bins
disNile = cut(Nile, bins)
head(disNile)
table(disNile)
# you can adjust the lable
disNile = cut(Nile, bins, labels = bins[-9])
table(disNile)
cat("hello")
"hello" # 如果直接写的话就会有双引号
x = rnorm(100)
y = rnorm(100)
plot(x, y, xlab = 'x-axis', ylab = 'y-axis', main = 'Plot of X vs Y')
pdf('Figure.pdf') # save it as pdf
# jpeg('Figure.jpeg') # save it as jpeg
plot(x, y, col = 'green')
dev.off() # Tell R that we are done creating the plot
x = seq(1, 10) # or x = 1:10
y = x
f = outer(x, y, function(x, y)cos(y)/(1 + x^2))
contour(x, y, f)
image(x, y, f)
persp(x, y, f, theta = 30, phi = 20)
# Theta and phi control the angles at which the plot is viewed
A = matrix(1:16, 4, 4)
A
A[2,3]
A[c(1, 3), c(2, 4)] # Select multiple row and column
A[1:3, 2:4]
A[, 1:2]
A[1:2, ]
A[-2, ] # '-' means except
dim(A) # The dimension of A, 就是python里的shape?
# Auto = read.table('Auto.data', header = T, na.strings = '?')
# dim(Auto) # return the dimension
# Auto = na.omit(Auto) # remove rows with NA
# names(Auto) # Check the variable names
# plot(Auto$, Auto$)
# # 或者不使用$
# attach(Auto)
# plot(column1, column2) # scatter plot if two numerical
# hist(column1, col = 2) # histogram
# pairs(Auto) # scatter plot matrix
# cylinders = as.factor(cylinders)
# summary(Auto)
savehistory() # save a record of all of the commands in the most recent session
